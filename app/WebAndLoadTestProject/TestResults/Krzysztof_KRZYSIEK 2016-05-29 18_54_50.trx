<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="5ce2cb3d-0d82-4074-bbf1-eae6cbff27e7" name="Krzysztof@KRZYSIEK 2016-05-29 18:54:50" runUser="KRZYSIEK\Krzysztof" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="1d0f59d5-4167-4481-826a-602c2777ce60">
    <Description>These are default test settings for a local test run.</Description>
    <Execution>
      <TestTypeSpecific>
        <UnitTestRunConfig testTypeId="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b">
          <AssemblyResolution>
            <TestDirectory useLoadContext="true" />
          </AssemblyResolution>
        </UnitTestRunConfig>
        <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207" runUntilDataExhausted="true">
          <Browser name="Internet Explorer 11.0" MaxConnections="6">
            <Headers>
              <Header name="User-Agent" value="Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko" />
              <Header name="Accept" value="*/*" />
              <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
              <Header name="Accept-Encoding" value="GZIP" />
            </Headers>
          </Browser>
        </WebTestRunConfiguration>
      </TestTypeSpecific>
      <AgentRule name="LocalMachineDefaultRole">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="Krzysztof_KRZYSIEK 2016-05-29 18_54_50" />
    <Properties>
      <Property name="TestSettingsUIType" value="UnitTest" />
    </Properties>
  </TestSettings>
  <Times creation="2016-05-29T18:54:50.5566525+02:00" queuing="2016-05-29T18:54:52.6035493+02:00" start="2016-05-29T18:54:52.7754243+02:00" finish="2016-05-29T18:55:04.6303875+02:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="RegisterAndLogin" storage="f:\.net projekt\dotnetprojekt\app\webandloadtestproject\webandloadtestproject\registerandlogin.webtest" id="2e2ecdcb-5b03-4c42-9dd7-5584e14d86fb" persistedWebTest="">
      <Execution id="8ad3f61d-3631-4532-8e5d-cfaa21cf75e1" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="2e2ecdcb-5b03-4c42-9dd7-5584e14d86fb" executionId="8ad3f61d-3631-4532-8e5d-cfaa21cf75e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="8ad3f61d-3631-4532-8e5d-cfaa21cf75e1" testId="2e2ecdcb-5b03-4c42-9dd7-5584e14d86fb" testName="RegisterAndLogin" computerName="KRZYSIEK" duration="00:00:00.9124771" startTime="2016-05-29T18:54:52.8223005+02:00" endTime="2016-05-29T18:55:04.5835105+02:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ad3f61d-3631-4532-8e5d-cfaa21cf75e1" dataRowCount="30">
      <Output>
        <ErrorInfo>
          <Message>13 primary requests, 0 dependant requests and 0 conditional rules failed</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="RegisterAndLogin.webtestResult" />
      </ResultFiles>
      <TestSettings name="Local" id="1d0f59d5-4167-4481-826a-602c2777ce60">
        <Description>These are default test settings for a local test run.</Description>
        <Execution>
          <TestTypeSpecific>
            <UnitTestRunConfig testTypeId="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b">
              <AssemblyResolution>
                <TestDirectory useLoadContext="true" />
              </AssemblyResolution>
            </UnitTestRunConfig>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207" runUntilDataExhausted="true">
              <Browser name="Internet Explorer 11.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="LocalMachineDefaultRole">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="Krzysztof_KRZYSIEK 2016-05-29 18_54_50" />
        <Properties>
          <Property name="TestSettingsUIType" value="UnitTest" />
        </Properties>
      </TestSettings>
      <WebTestResultFilePath>Krzysztof_KRZYSIEK 2016-05-29 18_54_50\In\8ad3f61d-3631-4532-8e5d-cfaa21cf75e1\RegisterAndLogin.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>