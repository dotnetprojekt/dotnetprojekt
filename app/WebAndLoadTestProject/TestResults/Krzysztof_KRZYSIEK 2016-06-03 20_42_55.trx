<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="b7481642-9c3d-40c9-9691-7ea3e5357d99" name="Krzysztof@KRZYSIEK 2016-06-03 20:42:55" runUser="KRZYSIEK\Krzysztof" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="1d0f59d5-4167-4481-826a-602c2777ce60">
    <Description>These are default test settings for a local test run.</Description>
    <Execution>
      <TestTypeSpecific>
        <UnitTestRunConfig testTypeId="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b">
          <AssemblyResolution>
            <TestDirectory useLoadContext="true" />
          </AssemblyResolution>
        </UnitTestRunConfig>
        <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207" runUntilDataExhausted="true">
          <Browser name="Internet Explorer 11.0" MaxConnections="6">
            <Headers>
              <Header name="User-Agent" value="Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko" />
              <Header name="Accept" value="*/*" />
              <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
              <Header name="Accept-Encoding" value="GZIP" />
            </Headers>
          </Browser>
        </WebTestRunConfiguration>
      </TestTypeSpecific>
      <AgentRule name="LocalMachineDefaultRole">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="Krzysztof_KRZYSIEK 2016-06-03 20_42_55" />
    <Properties>
      <Property name="TestSettingsUIType" value="UnitTest" />
    </Properties>
  </TestSettings>
  <Times creation="2016-06-03T20:42:55.8449278+02:00" queuing="2016-06-03T20:42:56.1419444+02:00" start="2016-06-03T20:42:56.3160668+02:00" finish="2016-06-03T20:43:07.7142782+02:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest1" storage="f:\.net projekt\dotnetprojekt\app\webandloadtestproject\webandloadtestproject\webtest1.webtest" id="3914cd91-ef43-46c0-b074-cc39e43e9cbe" persistedWebTest="">
      <Execution id="cf44e837-3c5c-4ab7-94ec-95e2c5a967ca" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="3914cd91-ef43-46c0-b074-cc39e43e9cbe" executionId="cf44e837-3c5c-4ab7-94ec-95e2c5a967ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="cf44e837-3c5c-4ab7-94ec-95e2c5a967ca" testId="3914cd91-ef43-46c0-b074-cc39e43e9cbe" testName="WebTest1" computerName="KRZYSIEK" duration="00:00:00.6998385" startTime="2016-06-03T20:42:56.3711063+02:00" endTime="2016-06-03T20:43:07.6602429+02:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf44e837-3c5c-4ab7-94ec-95e2c5a967ca">
      <Output>
        <ErrorInfo>
          <Message>14 primary requests, 0 dependant requests and 0 conditional rules failed</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="WebTest1.webtestResult" />
      </ResultFiles>
      <TestSettings name="Local" id="1d0f59d5-4167-4481-826a-602c2777ce60">
        <Description>These are default test settings for a local test run.</Description>
        <Execution>
          <TestTypeSpecific>
            <UnitTestRunConfig testTypeId="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b">
              <AssemblyResolution>
                <TestDirectory useLoadContext="true" />
              </AssemblyResolution>
            </UnitTestRunConfig>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207" runUntilDataExhausted="true">
              <Browser name="Internet Explorer 11.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="LocalMachineDefaultRole">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="Krzysztof_KRZYSIEK 2016-06-03 20_42_55" />
        <Properties>
          <Property name="TestSettingsUIType" value="UnitTest" />
        </Properties>
      </TestSettings>
      <WebTestResultFilePath>Krzysztof_KRZYSIEK 2016-06-03 20_42_55\In\cf44e837-3c5c-4ab7-94ec-95e2c5a967ca\WebTest1.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>