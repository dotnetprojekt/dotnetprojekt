<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="b073e7f7-6461-45cb-9f07-209468a79f03" name="Krzysztof@KRZYSIEK 2016-06-03 21:04:18" runUser="KRZYSIEK\Krzysztof" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="1d0f59d5-4167-4481-826a-602c2777ce60">
    <Description>These are default test settings for a local test run.</Description>
    <Execution>
      <TestTypeSpecific>
        <UnitTestRunConfig testTypeId="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b">
          <AssemblyResolution>
            <TestDirectory useLoadContext="true" />
          </AssemblyResolution>
        </UnitTestRunConfig>
        <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207" runUntilDataExhausted="true">
          <Browser name="Internet Explorer 11.0" MaxConnections="6">
            <Headers>
              <Header name="User-Agent" value="Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko" />
              <Header name="Accept" value="*/*" />
              <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
              <Header name="Accept-Encoding" value="GZIP" />
            </Headers>
          </Browser>
        </WebTestRunConfiguration>
      </TestTypeSpecific>
      <AgentRule name="LocalMachineDefaultRole">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="Krzysztof_KRZYSIEK 2016-06-03 21_04_18" />
    <Properties>
      <Property name="TestSettingsUIType" value="UnitTest" />
    </Properties>
  </TestSettings>
  <Times creation="2016-06-03T21:04:18.7824027+02:00" queuing="2016-06-03T21:04:19.1666757+02:00" start="2016-06-03T21:04:19.4738924+02:00" finish="2016-06-03T21:04:26.9367728+02:00" />
  <ResultSummary outcome="Aborted">
    <Counters total="1" executed="1" error="0" failed="0" timeout="0" aborted="1" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest1" storage="f:\.net projekt\dotnetprojekt\app\webandloadtestproject\webandloadtestproject\webtest1.webtest" id="e7a9ab0c-5c74-4147-aab5-f6a9b637f904" persistedWebTest="">
      <Execution id="e4349ed9-e9d8-4c8b-b01d-ecf3944e08a2" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="e7a9ab0c-5c74-4147-aab5-f6a9b637f904" executionId="e4349ed9-e9d8-4c8b-b01d-ecf3944e08a2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="e4349ed9-e9d8-4c8b-b01d-ecf3944e08a2" testId="e7a9ab0c-5c74-4147-aab5-f6a9b637f904" testName="WebTest1" computerName="KRZYSIEK" duration="00:00:00.5584581" startTime="2016-06-03T21:04:19.5239278+02:00" endTime="2016-06-03T21:04:26.9007765+02:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Aborted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4349ed9-e9d8-4c8b-b01d-ecf3944e08a2">
      <Output>
        <ErrorInfo>
          <Message>7 primary requests, 0 dependant requests and 0 conditional rules failed</Message>
        </ErrorInfo>
      </Output>
      <TestSettings name="Local" id="1d0f59d5-4167-4481-826a-602c2777ce60">
        <Description>These are default test settings for a local test run.</Description>
        <Execution>
          <TestTypeSpecific>
            <UnitTestRunConfig testTypeId="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b">
              <AssemblyResolution>
                <TestDirectory useLoadContext="true" />
              </AssemblyResolution>
            </UnitTestRunConfig>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207" runUntilDataExhausted="true">
              <Browser name="Internet Explorer 11.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="LocalMachineDefaultRole">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="Krzysztof_KRZYSIEK 2016-06-03 21_04_18" />
        <Properties>
          <Property name="TestSettingsUIType" value="UnitTest" />
        </Properties>
      </TestSettings>
      <WebTestResultFilePath>
      </WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>